{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///D:/pet/dev-board/packages/frontend/src/lib/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/',\r\n    withCredentials: true,\r\n}); "],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC5B,SAAS,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IAC5C,iBAAiB;AACrB","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///D:/pet/dev-board/packages/frontend/src/features/auth/auth.api.ts"],"sourcesContent":["import { api } from '../../lib/api';\r\nimport { AuthCredentials, AuthResponse, RefreshRequest, User } from '../../types/auth.types';\r\n\r\nexport const login = (data: AuthCredentials) =>\r\n    Promise.resolve(api.post<AuthResponse>('/auth/login', data).then((res) => res.data));\r\n\r\nexport const register = (data: AuthCredentials) =>\r\n    Promise.resolve(api.post<AuthResponse>('/auth/register', data).then(({ data }) => data));\r\n\r\nexport const refresh = (data: RefreshRequest) =>\r\n    Promise.resolve(api.post<AuthResponse>('/auth/refresh', data).then(({ data }) => data));\r\n\r\nexport const logout = (data: RefreshRequest) =>\r\n    Promise.resolve(api.post<{ message: string }>('/auth/logout', data).then(({ data }) => data));\r\n\r\nexport const getMe = (token: string) =>\r\n    Promise.resolve(api.get<User>('/auth/me', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n    }).then(({ data }) => data)); "],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,QAAQ,CAAC,OAClB,QAAQ,OAAO,CAAC,yIAAA,CAAA,MAAG,CAAC,IAAI,CAAe,eAAe,MAAM,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI;AAE/E,MAAM,WAAW,CAAC,OACrB,QAAQ,OAAO,CAAC,yIAAA,CAAA,MAAG,CAAC,IAAI,CAAe,kBAAkB,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,GAAK;AAE/E,MAAM,UAAU,CAAC,OACpB,QAAQ,OAAO,CAAC,yIAAA,CAAA,MAAG,CAAC,IAAI,CAAe,iBAAiB,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,GAAK;AAE9E,MAAM,SAAS,CAAC,OACnB,QAAQ,OAAO,CAAC,yIAAA,CAAA,MAAG,CAAC,IAAI,CAAsB,gBAAgB,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,GAAK;AAEpF,MAAM,QAAQ,CAAC,QAClB,QAAQ,OAAO,CAAC,yIAAA,CAAA,MAAG,CAAC,GAAG,CAAO,YAAY;QACtC,SAAS;YAAE,eAAe,CAAC,OAAO,EAAE,OAAO;QAAC;IAChD,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,GAAK","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///D:/pet/dev-board/packages/frontend/src/store/auth.store.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { AuthTokens, User } from '../types/auth.types';\r\nimport { login as loginApi, register as registerApi, refresh as refreshApi, getMe } from '../features/auth/auth.api';\r\nimport { persist } from 'zustand/middleware';\r\n\r\ninterface AuthState {\r\n    user: User | null;\r\n    tokens: AuthTokens | null;\r\n    setUser: (user: User | null) => void;\r\n    setTokens: (tokens: AuthTokens | null) => void;\r\n    logout: () => void;\r\n    login: (creds: { username: string; pass: string }) => Promise<void>;\r\n    register: (creds: { username: string; pass: string }) => Promise<void>;\r\n    refresh: () => Promise<void>;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n    persist(\r\n        (set, get) => ({\r\n            user: null,\r\n            tokens: null,\r\n            setUser: (user) => set({ user }),\r\n            setTokens: (tokens) => set({ tokens }),\r\n            logout: () => set({ user: null, tokens: null }),\r\n            login: async (creds) => {\r\n                const tokens = await loginApi(creds);\r\n                set({ tokens });\r\n                const user = await getMe(tokens.access_token);\r\n                set({ user });\r\n            },\r\n            register: async (creds) => {\r\n                const tokens = await registerApi(creds);\r\n                set({ tokens });\r\n                const user = await getMe(tokens.access_token);\r\n                set({ user });\r\n            },\r\n            refresh: async () => {\r\n                const { tokens } = get();\r\n                if (!tokens?.refresh_token) throw new Error('No refresh token');\r\n                const newTokens = await refreshApi({ refreshToken: tokens.refresh_token });\r\n                set({ tokens: newTokens });\r\n                const user = await getMe(newTokens.access_token);\r\n                set({ user });\r\n            },\r\n        }),\r\n        {\r\n            name: 'auth',\r\n            partialize: (state) => ({ tokens: state.tokens, user: state.user }),\r\n        }\r\n    )\r\n); "],"names":[],"mappings":";;;AAAA;AAEA;AACA;;;;AAaO,MAAM,eAAe,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,IAC7B,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EACF,CAAC,KAAK,MAAQ,CAAC;QACX,MAAM;QACN,QAAQ;QACR,SAAS,CAAC,OAAS,IAAI;gBAAE;YAAK;QAC9B,WAAW,CAAC,SAAW,IAAI;gBAAE;YAAO;QACpC,QAAQ,IAAM,IAAI;gBAAE,MAAM;gBAAM,QAAQ;YAAK;QAC7C,OAAO,OAAO;YACV,MAAM,SAAS,MAAM,CAAA,GAAA,8JAAA,CAAA,QAAQ,AAAD,EAAE;YAC9B,IAAI;gBAAE;YAAO;YACb,MAAM,OAAO,MAAM,CAAA,GAAA,8JAAA,CAAA,QAAK,AAAD,EAAE,OAAO,YAAY;YAC5C,IAAI;gBAAE;YAAK;QACf;QACA,UAAU,OAAO;YACb,MAAM,SAAS,MAAM,CAAA,GAAA,8JAAA,CAAA,WAAW,AAAD,EAAE;YACjC,IAAI;gBAAE;YAAO;YACb,MAAM,OAAO,MAAM,CAAA,GAAA,8JAAA,CAAA,QAAK,AAAD,EAAE,OAAO,YAAY;YAC5C,IAAI;gBAAE;YAAK;QACf;QACA,SAAS;YACL,MAAM,EAAE,MAAM,EAAE,GAAG;YACnB,IAAI,CAAC,QAAQ,eAAe,MAAM,IAAI,MAAM;YAC5C,MAAM,YAAY,MAAM,CAAA,GAAA,8JAAA,CAAA,UAAU,AAAD,EAAE;gBAAE,cAAc,OAAO,aAAa;YAAC;YACxE,IAAI;gBAAE,QAAQ;YAAU;YACxB,MAAM,OAAO,MAAM,CAAA,GAAA,8JAAA,CAAA,QAAK,AAAD,EAAE,UAAU,YAAY;YAC/C,IAAI;gBAAE;YAAK;QACf;IACJ,CAAC,GACD;IACI,MAAM;IACN,YAAY,CAAC,QAAU,CAAC;YAAE,QAAQ,MAAM,MAAM;YAAE,MAAM,MAAM,IAAI;QAAC,CAAC;AACtE","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///D:/pet/dev-board/packages/frontend/src/components/auth-test.tsx"],"sourcesContent":["'use client';\r\nimport { useAuthStore } from '../store/auth.store';\r\n\r\nexport default function AuthTest() {\r\n  const { user, tokens, login, register, refresh, logout } = useAuthStore();\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => login({ username: 'youruser', pass: 'yourpass' })}>Login</button>\r\n      <button onClick={() => register({ username: 'newuser', pass: 'newpass' })}>Register</button>\r\n      <button onClick={refresh}>Refresh</button>\r\n      <button onClick={logout}>Logout</button>\r\n      <pre>{JSON.stringify({ user, tokens }, null, 2)}</pre>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACtB,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD;IAEtE,qBACE,8OAAC;;0BACC,8OAAC;gBAAO,SAAS,IAAM,MAAM;wBAAE,UAAU;wBAAY,MAAM;oBAAW;0BAAI;;;;;;0BAC1E,8OAAC;gBAAO,SAAS,IAAM,SAAS;wBAAE,UAAU;wBAAW,MAAM;oBAAU;0BAAI;;;;;;0BAC3E,8OAAC;gBAAO,SAAS;0BAAS;;;;;;0BAC1B,8OAAC;gBAAO,SAAS;0BAAQ;;;;;;0BACzB,8OAAC;0BAAK,KAAK,SAAS,CAAC;oBAAE;oBAAM;gBAAO,GAAG,MAAM;;;;;;;;;;;;AAGnD","debugId":null}}]
}